import { __decorate, __param } from 'tslib';
import { InjectionToken, Inject, ɵɵdefineInjectable, ɵɵinject, Injectable, EventEmitter, Output, Input, Component, ElementRef, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function StripeSource_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 1);
    ɵngcc0.ɵɵtext(2, "Stripe PublishableKey NOT SET. Use method StripeScriptTag.setPublishableKey()");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} }
function StripeCard_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 1);
    ɵngcc0.ɵɵtext(2, "Stripe PublishableKey NOT SET. Use method StripeScriptTag.setPublishableKey()");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} }
function StripeBank_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 1);
    ɵngcc0.ɵɵtext(2, "Stripe PublishableKey NOT SET. Use method StripeScriptTag.setPublishableKey()");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} }
const STRIPE_PUBLISHABLE_KEY = new InjectionToken('Stripe Publishable Key');
const STRIPE_OPTIONS = new InjectionToken('Stripe Options');

let StripeScriptTag = class StripeScriptTag {
    constructor(key, options) {
        this.src = "https://js.stripe.com/v3/";
        this.load = this.injectIntoHead();
        if (key)
            this.setPublishableKey(key, options);
    }
    promiseStripe() {
        return this.load;
    }
    promiseInstance() {
        return this.promiseStripe()
            .then(stripe => {
            if (!this.StripeInstance) {
                const err = new Error("Stripe PublishableKey NOT SET. Use method StripeScriptTag.setPublishableKey()");
                err["code"] = "STRIPEKEYNOTSET";
                throw err;
                //return Promise.reject( err )
            }
            return this.StripeInstance;
        });
    }
    setPublishableKey(key, options) {
        return this.load.then(() => this.StripeInstance = this.Stripe(key, options));
    }
    injectIntoHead() {
        if (window["Stripe"]) {
            return Promise.resolve(this.Stripe = window["Stripe"]);
        }
        return new Promise((res, rej) => {
            const head = this.getTargetTagDropElement();
            const script = document.createElement("script");
            script.setAttribute("src", this.src);
            script.setAttribute("type", "text/javascript");
            script.addEventListener("load", () => {
                this.Stripe = this.grabStripe();
                res(this.Stripe);
            });
            head.appendChild(script);
        });
    }
    grabStripe() {
        return window["Stripe"];
    }
    getTargetTagDropElement() {
        let elm = document.getElementsByTagName("head");
        if (elm.length)
            return elm[0];
        return document.getElementsByTagName("body")[0];
    }
};
StripeScriptTag.ɵfac = function StripeScriptTag_Factory(t) { return new (t || StripeScriptTag)(ɵngcc0.ɵɵinject(STRIPE_PUBLISHABLE_KEY), ɵngcc0.ɵɵinject(STRIPE_OPTIONS)); };
StripeScriptTag.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [STRIPE_PUBLISHABLE_KEY,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [STRIPE_OPTIONS,] }] }
];
StripeScriptTag.ɵprov = ɵɵdefineInjectable({ factory: function StripeScriptTag_Factory() { return new StripeScriptTag(ɵɵinject(STRIPE_PUBLISHABLE_KEY), ɵɵinject(STRIPE_OPTIONS)); }, token: StripeScriptTag, providedIn: "root" });
StripeScriptTag = __decorate([ __param(0, Inject(STRIPE_PUBLISHABLE_KEY)),
    __param(1, Inject(STRIPE_OPTIONS))
], StripeScriptTag);

class StripeComponent {
    constructor(StripeScriptTag) {
        this.StripeScriptTag = StripeScriptTag;
        this.catcher = new EventEmitter();
        this.invalidChange = new EventEmitter();
    }
    ngOnInit() {
        this.init();
    }
    init() {
        return this.StripeScriptTag.promiseInstance()
            .then(i => this.stripe = i);
    }
}
StripeComponent.ɵfac = function StripeComponent_Factory(t) { ɵngcc0.ɵɵinvalidFactory(); };
StripeComponent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: StripeComponent, inputs: { invalid: "invalid" }, outputs: { catcher: "catch", invalidChange: "invalidChange" } });
__decorate([
    Output("catch")
], StripeComponent.prototype, "catcher", void 0);
__decorate([
    Input()
], StripeComponent.prototype, "invalid", void 0);
__decorate([
    Output()
], StripeComponent.prototype, "invalidChange", void 0);

let StripeSource = class StripeSource extends StripeComponent {
    constructor(StripeScriptTag) {
        super(StripeScriptTag);
        this.StripeScriptTag = StripeScriptTag;
        this.sourceChange = new EventEmitter();
    }
    createSource() {
        delete this.invalid;
        this.invalidChange.emit(this.invalid);
        return this.stripe.createSource(this.elements)
            .then((result) => {
            if (result.error) {
                if (result.error.type == "validation_error") {
                    this.invalidChange.emit(this.invalid = result.error);
                }
                else {
                    this.catcher.emit(result.error);
                    throw result.error;
                }
            }
            else {
                this.sourceChange.emit(this.source = result.source);
                return result.source;
            }
        });
    }
};
StripeSource.ɵfac = function StripeSource_Factory(t) { return new (t || StripeSource)(ɵngcc0.ɵɵdirectiveInject(StripeScriptTag)); };
StripeSource.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: StripeSource, selectors: [["stripe-source"]], inputs: { source: "source" }, outputs: { sourceChange: "sourceChange" }, exportAs: ["StripeSource"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 1, consts: [[4, "ngIf"], [2, "color", "red"]], template: function StripeSource_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, StripeSource_ng_container_0_Template, 3, 0, "ng-container", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !ctx.StripeScriptTag.StripeInstance);
    } }, directives: [ɵngcc1.NgIf], encapsulation: 2 });
StripeSource.ctorParameters = () => [
    { type: StripeScriptTag }
];
__decorate([
    Input()
], StripeSource.prototype, "source", void 0);
__decorate([
    Output()
], StripeSource.prototype, "sourceChange", void 0);

let StripeCard = class StripeCard extends StripeSource {
    constructor(ElementRef, StripeScriptTag) {
        super(StripeScriptTag);
        this.ElementRef = ElementRef;
        this.StripeScriptTag = StripeScriptTag;
        this.tokenChange = new EventEmitter();
    }
    ngOnInit() {
        super.init()
            .then(() => {
            this.elements = this.stripe.elements().create('card', this.options);
            this.elements.mount(this.ElementRef.nativeElement);
            this.elements.addEventListener('change', (result) => {
                if (result.error) {
                    this.invalidChange.emit(this.invalid = result.error);
                }
            });
        });
    }
    createToken(extraData) {
        delete this.invalid;
        this.invalidChange.emit(this.invalid);
        return this.stripe.createToken(this.elements, extraData)
            .then((result) => {
            if (result.error) {
                if (result.error.type == "validation_error") {
                    this.invalidChange.emit(this.invalid = result.error);
                }
                else {
                    this.catcher.emit(result.error);
                    throw result.error;
                }
            }
            else {
                this.tokenChange.emit(this.token = result.token);
                return result.token;
            }
        });
    }
};
StripeCard.ɵfac = function StripeCard_Factory(t) { return new (t || StripeCard)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(StripeScriptTag)); };
StripeCard.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: StripeCard, selectors: [["stripe-card"]], inputs: { token: "token", options: "options" }, outputs: { tokenChange: "tokenChange" }, exportAs: ["StripeCard"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 1, consts: [[4, "ngIf"], [2, "color", "red"]], template: function StripeCard_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, StripeCard_ng_container_0_Template, 3, 0, "ng-container", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !ctx.StripeScriptTag.StripeInstance);
    } }, directives: [ɵngcc1.NgIf], encapsulation: 2 });
StripeCard.ctorParameters = () => [
    { type: ElementRef },
    { type: StripeScriptTag }
];
__decorate([
    Input()
], StripeCard.prototype, "options", void 0);
__decorate([
    Input()
], StripeCard.prototype, "token", void 0);
__decorate([
    Output()
], StripeCard.prototype, "tokenChange", void 0);

let StripeBank = class StripeBank extends StripeComponent {
    constructor(StripeScriptTag) {
        super(StripeScriptTag);
        this.StripeScriptTag = StripeScriptTag;
        this.tokenChange = new EventEmitter();
    }
    createToken(data) {
        delete this.invalid;
        this.invalidChange.emit(this.invalid);
        return this.stripe.createToken('bank_account', data)
            .then((result) => {
            if (result.error) {
                if (result.error.type == "validation_error") {
                    this.invalidChange.emit(this.invalid = result.error);
                }
                else {
                    this.catcher.emit(result.error);
                    throw result.error;
                }
            }
            else {
                this.tokenChange.emit(this.token = result.token);
                return result.token;
            }
        });
    }
};
StripeBank.ɵfac = function StripeBank_Factory(t) { return new (t || StripeBank)(ɵngcc0.ɵɵdirectiveInject(StripeScriptTag)); };
StripeBank.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: StripeBank, selectors: [["stripe-bank"]], inputs: { token: "token", options: "options" }, outputs: { tokenChange: "tokenChange" }, exportAs: ["StripeBank"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 1, consts: [[4, "ngIf"], [2, "color", "red"]], template: function StripeBank_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, StripeBank_ng_container_0_Template, 3, 0, "ng-container", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !ctx.StripeScriptTag.StripeInstance);
    } }, directives: [ɵngcc1.NgIf], encapsulation: 2 });
StripeBank.ctorParameters = () => [
    { type: StripeScriptTag }
];
__decorate([
    Input()
], StripeBank.prototype, "options", void 0);
__decorate([
    Input()
], StripeBank.prototype, "token", void 0);
__decorate([
    Output()
], StripeBank.prototype, "tokenChange", void 0);

var StripeModule_1;
const declarations = [
    StripeSource,
    StripeCard,
    StripeBank
];
let StripeModule = StripeModule_1 = class StripeModule {
    static forRoot(publishableKey, options) {
        return {
            ngModule: StripeModule_1,
            providers: [
                StripeScriptTag,
                {
                    provide: STRIPE_PUBLISHABLE_KEY,
                    useValue: publishableKey
                },
                {
                    provide: STRIPE_OPTIONS,
                    useValue: options
                }
            ],
        };
    }
};
StripeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: StripeModule });
StripeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function StripeModule_Factory(t) { return new (t || StripeModule)(); }, imports: [[
            CommonModule
        ]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(StripeScriptTag, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: String, decorators: [{
                type: Inject,
                args: [STRIPE_PUBLISHABLE_KEY]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [STRIPE_OPTIONS]
            }] }]; }, null); })();

/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(StripeSource, [{
        type: Component,
        args: [{
                selector: "stripe-source",
                template: `
      <ng-container *ngIf="!StripeScriptTag.StripeInstance">
          <div style="color:red;">Stripe PublishableKey NOT SET. Use method StripeScriptTag.setPublishableKey()</div>
      </ng-container>
  `,
                exportAs: "StripeSource"
            }]
    }], function () { return [{ type: StripeScriptTag }]; }, { sourceChange: [{
            type: Output
        }], source: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(StripeCard, [{
        type: Component,
        args: [{
                selector: "stripe-card",
                template: `
      <ng-container *ngIf="!StripeScriptTag.StripeInstance">
          <div style="color:red;">Stripe PublishableKey NOT SET. Use method StripeScriptTag.setPublishableKey()</div>
      </ng-container>
  `,
                exportAs: "StripeCard"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: StripeScriptTag }]; }, { tokenChange: [{
            type: Output
        }], token: [{
            type: Input
        }], options: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(StripeBank, [{
        type: Component,
        args: [{
                selector: "stripe-bank",
                template: `
      <ng-container *ngIf="!StripeScriptTag.StripeInstance">
          <div style="color:red;">Stripe PublishableKey NOT SET. Use method StripeScriptTag.setPublishableKey()</div>
      </ng-container>
  `,
                exportAs: "StripeBank"
            }]
    }], function () { return [{ type: StripeScriptTag }]; }, { tokenChange: [{
            type: Output
        }], token: [{
            type: Input
        }], options: [{
            type: Input
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(StripeModule, { declarations: function () { return [StripeSource,
        StripeCard,
        StripeBank]; }, imports: function () { return [CommonModule]; }, exports: function () { return [StripeSource,
        StripeCard,
        StripeBank]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(StripeModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule
                ],
                declarations: declarations,
                // providers: [ StripeScriptTag ],
                exports: [...declarations]
            }]
    }], null, null); })();
/**
 * @deprecated Please import `StripeModule` directly
 */
const Module = StripeModule;

/**
 * Generated bundle index. Do not edit.
 */

export { Module, STRIPE_OPTIONS, STRIPE_PUBLISHABLE_KEY, StripeBank, StripeCard, StripeModule, StripeScriptTag, StripeSource, StripeComponent as ɵa };

//# sourceMappingURL=stripe-angular.js.map